import type { PolicyRecommendation, ClimateMetrics, CarbonCredit } from "@shared/schema";

interface ReportData {
  climateMetrics?: ClimateMetrics;
  policies: PolicyRecommendation[];
  carbonCredits: CarbonCredit[];
  climateData?: any;
}

export function generatePolicyReport(data: ReportData): void {
  const reportContent = `
CLIMATE ACTION AI - POLICY RECOMMENDATIONS REPORT
Generated on: ${new Date().toLocaleString()}

=================================================================
EXECUTIVE SUMMARY
=================================================================

Climate Metrics Overview:
• Global CO₂ Level: ${data.climateMetrics?.co2Level || 'N/A'} ppm
• Global Temperature Anomaly: +${data.climateMetrics?.temperature || 'N/A'}°C above pre-industrial
• Credits Allocated: ${data.climateMetrics?.creditsAllocated ? `${(data.climateMetrics.creditsAllocated / 1000000).toFixed(1)}M tons` : 'N/A'}
• Policy Impact Score: ${data.climateMetrics?.policyScore || 'N/A'}/10

=================================================================
POLICY RECOMMENDATIONS
=================================================================

${data.policies.map((policy, index) => `
${index + 1}. ${policy.title.toUpperCase()}
   Category: ${policy.category}
   Priority: ${policy.priority}
   
   Description:
   ${policy.description}
   
   Impact Analysis:
   • Projected Impact: ${policy.projectedImpact}
   • Implementation Cost: ${policy.implementationCost}
   • Timeline: ${policy.timeline}
   
   ----------------------------------------------------------
`).join('')}

=================================================================
CARBON CREDIT PORTFOLIO
=================================================================

Total Available Credits: ${data.carbonCredits.reduce((sum, credit) => sum + credit.creditsAmount, 0).toLocaleString()}
Total Portfolio Value: $${data.carbonCredits.reduce((sum, credit) => sum + credit.cost, 0).toLocaleString()}

Credit Breakdown:
${data.carbonCredits.map((credit, index) => `
${index + 1}. ${credit.projectType}
   • Credits: ${credit.creditsAmount.toLocaleString()}
   • Cost: $${credit.cost.toLocaleString()}
   • Impact Level: ${credit.impactLevel}
   • Description: ${credit.description}
`).join('')}

=================================================================
IMPLEMENTATION ROADMAP
=================================================================

PHASE 1 (0-6 months): High Priority Initiatives
${data.policies.filter(p => p.priority === "High Priority").map(p => `• ${p.title}`).join('\n')}

PHASE 2 (6-18 months): Medium Priority Initiatives
${data.policies.filter(p => p.priority === "Medium Priority").map(p => `• ${p.title}`).join('\n')}

PHASE 3 (18+ months): Long-term Initiatives
${data.policies.filter(p => p.priority === "Low Priority").map(p => `• ${p.title}`).join('\n')}

=================================================================
PROJECTED OUTCOMES
=================================================================

Combined Impact: 26% emissions reduction over 5 years
Economic Investment: $${data.policies.reduce((sum, policy) => {
  const cost = policy.implementationCost.replace(/[^0-9.]/g, '');
  return sum + (parseFloat(cost) || 0);
}, 0).toFixed(1)}B total implementation cost

Key Performance Indicators:
• Emissions Reduction: Target 26% decrease
• Carbon Credits Efficiency: Optimize allocation across ${data.carbonCredits.length} project types
• Policy Implementation: ${data.policies.length} strategic initiatives
• Timeline: Phased approach over 36 months

=================================================================
RECOMMENDATIONS FOR IMMEDIATE ACTION
=================================================================

1. Begin implementation of high-priority policies immediately
2. Establish carbon credit allocation strategy
3. Set up monitoring and evaluation framework
4. Engage stakeholders across all sectors
5. Secure funding for Phase 1 initiatives

=================================================================
CONTACT INFORMATION
=================================================================

Generated by Climate Action AI Platform
For questions or updates, please refer to your dashboard.

Report End - ${new Date().toLocaleString()}
`;

  // Create and download the file
  const blob = new Blob([reportContent], { type: 'text/plain' });
  const url = window.URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = `Climate_Action_Policy_Report_${new Date().toISOString().split('T')[0]}.txt`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  window.URL.revokeObjectURL(url);
}

export function generateCarbonReport(data: ReportData): void {
  const csvContent = [
    // CSV Headers
    ['Project Type', 'Credits Amount', 'Cost ($)', 'Impact Level', 'Description'],
    // Data rows
    ...data.carbonCredits.map(credit => [
      credit.projectType,
      credit.creditsAmount.toString(),
      credit.cost.toString(),
      credit.impactLevel,
      `"${credit.description.replace(/"/g, '""')}"`
    ])
  ].map(row => row.join(',')).join('\n');

  const blob = new Blob([csvContent], { type: 'text/csv' });
  const url = window.URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = `Carbon_Credits_Report_${new Date().toISOString().split('T')[0]}.csv`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  window.URL.revokeObjectURL(url);
}